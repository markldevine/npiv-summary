#!/usr/bin/env raku

use ISP::Servers;
use KHPH;
use Terminal::ANSIColor;
use Data::Dump::Tree;   
#use Grammar::Debugger; 
#use Grammar::Tracer;

class ISPActLogRecord {
    my grammar ISPActLogRecord-Grammar {
        token TOP           { ^ <msg-prefix> <msg-number> <msg-type> \s+ <msg-text> $   }
        token msg-prefix    { 'AN' \w                                                   }
        token msg-number    { \d\d\d\d                                                  }
        token msg-type      { <[EISWK]>                                                 }
        token msg-text      { .+                                                        }
    }

    has Str $.actlog-record is required;
    has Str $.msg-time;
    has Str $.msg-prefix;
    has Str $.msg-number;
    has Str $.msg-type;
    has Str $.msg-text;

    submethod TWEAK {
        $!msg-time          = DateTime.now(formatter => { sprintf "%02d:%02d:%02d", .hour, .minute, .second }).Str;
        my $match           = ISPActLogRecord-Grammar.parse($!actlog-record);
        $!msg-prefix        = $match<msg-prefix>.Str;
        $!msg-number        = $match<msg-number>.Str;
        $!msg-type          = $match<msg-type>.Str;
        $!msg-text          = $match<msg-text>.Str;
    }
}

sub MAIN (
    Str:D   :$isp-server!,                          #= ISP server name
    Str:D   :$isp-admin!,                           #= ISP admin name
) {
    my $SERVER_NAME         = ISP::Servers.new().isp-server($isp-server);
    my $proc                = run   
                            '/usr/bin/dsmadmc',
                            '-SE=' ~ $isp-admin ~ '_' ~ $SERVER_NAME,
                            '-ID=' ~ $isp-admin,
                            '-PA=' ~ KHPH.new(:stash-path($*HOME ~ '/.isp/admin/' ~ $SERVER_NAME ~ '/' ~ $isp-admin ~ '.khph')).expose,
                            '-DATAONLY=YES',
                            '-CONSOLE',
                            :out;
    my $lines = supply {
        whenever start $proc.out {
            whenever .lines { .emit }
        }
    }.Channel;

### BLOCKING
#   for $lines.list -> $line {
#       put colored(DateTime.now(formatter => { sprintf "%02d:%02d:%02d", .hour, .minute, .second }) ~ '  ' ~ $line, 'cyan');
#   }
### NON-BLOCKING
    my $running = True;
    $lines.closed.then: { $running = False }
    while $running {
        while $lines.poll() -> $actlog-record {
            my $actlog-record-object = ISPActLogRecord.new(:$actlog-record);
            next unless acceptable-active-log-record($actlog-record-object);
            put colored($actlog-record-object.msg-time ~
                        '  ' ~ $actlog-record-object.msg-prefix ~ $actlog-record-object.msg-number ~ $actlog-record-object.msg-type ~
                        '  ' ~ $actlog-record-object.msg-text,
                        'cyan');
        }
#       put 'Do something else...';
        sleep .25;
    }
#   put "I'm done.";
}

sub acceptable-active-log-record(ISPActLogRecord:D $obj) {
return True if $obj.msg-text.contains('WCCPRD1');
# $s.stdout.lines.tap: { .say if .lc.contains(any <gfldex peppmeyer>) }
#   return if $obj.msg-type eq 'I';
#   return True;
    return False;
}

=finish
